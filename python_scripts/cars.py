#!/usr/bin/env python3

import os
import json
import locale
import sys
import reports
import emails


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales_car_model = {"car_model": ""}
  max_sales = 0
  car_by_years = {}
 
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    car_year = item["car"]["car_year"]
    total_sales_by_year = 0
    most_popular_year = int()
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales  
    # print(item["car"]["car_model"], item["total_sales"])
    if item["total_sales"] > max_sales:
      max_sales_car_model = item["car"]
      max_sales = item["total_sales"]
    # TODO: also handle most popular car_year
    if car_year not in car_by_years.keys():
      car_by_years[car_year] = {}
      car_by_years[car_year]['Count'] = 0
      car_by_years[car_year]['Total sales'] = 0     
    car_by_years[car_year]['Count'] += 1
    # print(f"{item_revenue}")
    car_by_years[car_year]['Total sales'] += item['total_sales']
    most_popular_year_sales = car_by_years[max(car_by_years, key=lambda v: car_by_years[v]['Total sales'])]
    most_popular_year = int(max(car_by_years, key=lambda v: car_by_years[v]['Total sales']))
    # most_popular_year = max(car_by_years.get())
    
  # print(car_by_years)  
  # print(most_popular_year)
  # print(most_popular_year_sales)  
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(format_car(max_sales_car_model), max_sales),
    "The most popular year was {} with {} sales.".format(most_popular_year, most_popular_year_sales['Total sales']),  
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  # print(summary, type(summary))
  
  # Generate a paragraph that contains the necessary summary
  paragraph = "<br/>".join(summary)
  # Generate a table that contains the list of cars
  table_data = cars_dict_to_table(data)
  # Generate the PDF report
  title = "Sales summary for last month"
  attachment = "/tmp/cars.pdf"
  reports.generate(attachment, title, paragraph, table_data)

  # Send the email
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  body = "\n".join(summary)
  message = emails.generate(sender, receiver, title, body, attachment)
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)